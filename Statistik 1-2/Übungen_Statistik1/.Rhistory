library(dplyr)
covid_19 <- read_csv("/Users/Eugen/Desktop/Programming/DataQuest/Datasets/Corona/covid19.csv")
vector_cols <- colnames(covid_19)
knitr::kable(vector_cols)
knitr::kable(head(covid_19))
covid_19_all_states <- covid_19 %>% dplyr::filter(Province_State == "All States")%>% select(-Province_State)
covid_19_all_states_daily <-covid_19_all_states %>% select(Date, Country_Region, active, hospitalizedCurr, daily_tested, daily_positive)
covid_19_all_states_daily_sum <- covid_19_all_states_daily%>%group_by(Country_Region)%>%summarise(tested=sum(daily_tested),positive=sum(daily_positive),active=sum(active),hospitalized=sum(hospitalizedCurr)) %>% arrange(-tested)
covid_19_all_states_daily_sum
covid_top_10 <- covid_19_all_states_daily_sum[1:10,]
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$active
hospitalized_cases <- covid_top_10$hospitalized
view(countries)
view(tested_cases)
names(tested_cases) <- countries
view(tested_cases)
names(tested_cases, active_cases) <- countries
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tibble)
library(dplyr)
covid_19 <- read_csv("/Users/Eugen/Desktop/Programming/DataQuest/Datasets/Corona/covid19.csv")
vector_cols <- colnames(covid_19)
knitr::kable(vector_cols)
knitr::kable(head(covid_19))
covid_19_all_states <- covid_19 %>% dplyr::filter(Province_State == "All States")%>% select(-Province_State)
covid_19_all_states_daily <-covid_19_all_states %>% select(Date, Country_Region, active, hospitalizedCurr, daily_tested, daily_positive)
covid_19_all_states_daily_sum <- covid_19_all_states_daily%>%group_by(Country_Region)%>%summarise(tested=sum(daily_tested),positive=sum(daily_positive),active=sum(active),hospitalized=sum(hospitalizedCurr)) %>% arrange(-tested)
covid_19_all_states_daily_sum
covid_top_10 <- covid_19_all_states_daily_sum[1:10,]
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$active
hospitalized_cases <- covid_top_10$hospitalized
names(tested_cases) <- countries
names(positive_cases) <- countries
names(active_cases) <- countries
names(hospitalized_cases) <- countries
countries <- covid_top_10$Country_Region
tested_cases <- covid_top_10$tested
positive_cases <- covid_top_10$positive
active_cases <- covid_top_10$active
hospitalized_cases <- covid_top_10$hospitalized
names(tested_cases) <- countries
names(positive_cases) <- countries
names(active_cases) <- countries
names(hospitalized_cases) <- countries
ratio <- positive_cases/tested_cases
top_3_ratio <- arrange(-ratio)[1:3]
ratio <- positive_cases/tested_cases
top_3_ratio <- arrange(-ratio)
view(ratio)
dim(ratio)
type(ratio)
ratio <- positive_cases/tested_cases
top_3_ratio <- arrange(-)
ratio <- positive_cases/tested_cases
top_3_ratio <- arrange
ratio <- positive_cases/tested_cases
top_3_ratio <- arrange(ratio)
ratio <- positive_cases/tested_cases
top_3_ratio <- arrange(ratio$x)
ratio <- positive_cases/tested_cases
top_3_ratio <- sort(ratio)
view(top_3_ratio)
ratio <- positive_cases/tested_cases
top_3_ratio <- sort(-ratio)
top_3_ratio <- sort(-ratio)
ratio <- positive_cases/tested_cases
view(top_3_ratio)
ratio <- positive_cases/tested_cases
top_3_ratio <- sort(ratio, decreasing = FALSE)
view(top_3_ratio)
ratio <- positive_cases/tested_cases
top_3_ratio <- sort(ratio, decreasing = TRUE)
view(top_3_ratio)
ratio <- positive_cases/tested_cases
top_3_ratio <- sort(ratio, decreasing = TRUE)[1:3]
view(top_3_ratio)
united_kingdom <- c(top_3_ratio[1],tested_cases["United Kingdom"])
view(united_kingdom)
united_kingdom <- c(top_3_ratio["United Kingdom"],tested_cases["United Kingdom"],positive_case["United Kingdom"],active_cases["United Kingdom"],hospitalized_cases["United Kingdom"])
united_kingdom <- c(top_3_ratio["United Kingdom"],tested_cases["United Kingdom"],positive_cases["United Kingdom"],active_cases["United Kingdom"],hospitalized_cases["United Kingdom"])
view(united_kingdom)
united_kingdom <- c(0.11, 1473672, 166909, 0, 0)
united_states <- c(0.10, 17282363, 1877179, 0, 0)
turkey <- c(0.08, 2031192, 163941, 2980960, 0)
covid_mat <- rbind(united_kingdom,united_states,turkey)
view(covid_mat)
united_kingdom <- c(0.11, 1473672, 166909, 0, 0)
united_states <- c(0.10, 17282363, 1877179, 0, 0)
turkey <- c(0.08, 2031192, 163941, 2980960, 0)
covid_mat <- rbind(united_kingdom,united_states,turkey)
colnames(covid_mat) <- c("Ratio", "tested", "positive", "active", "hospitalized")
covid_mat
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = top_3_ratio)
covid_analysis_list <- list(question,answer, list(covid_19,covid_19_all_states,covid_19_all_states_daily,covid_19_all_states_daily_sum,covid_top_10),list(vector_cols,countries),list(covid_mat))
question <- "Which countries have had the highest number of positive cases against the number of tests?"
answer <- c("Positive tested cases" = top_3_ratio)
covid_analysis_list <- list(question,answer, list(covid_19,covid_19_all_states,covid_19_all_states_daily,covid_19_all_states_daily_sum,covid_top_10),list(vector_cols,countries),list(covid_mat))
covid_analysis_list
View(Logdaten_HS20)
unique(Logdaten_HS20$Ereigniskontext)
text <- c("Textseite: Videos zur Vorlesung Mathematik I","Link/URL: Vorlesungspodcast Mathematik I (Woche 1 bis 6)","Link/URL: Vorlesungspodcast Mathematik I (ab Woche 7)","Textseite: Ãœbersicht und direkte Links")
unique(Logdaten_HS20$Ereignisname)
library(readr)
library(tidyverse)
library(readr)
ts_d_14_03_04_03_wr <- read_delim("Downloads/ts-d-14.03.04.03-wr.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(ts_d_14_03_04_03_wr)
ts_d_14_03_04_03_wr <- read_delim("Downloads/ts-d-14.03.04.03-wr.csv", + ";", escape_double = FALSE, trim_ws = TRUE)
ts_d_14_03_04_03_wr <- read_delim("Downloads/ts-d-14.03.04.03-wr.csv", ";", escape_double = FALSE, trim_ws = TRUE)
deaths <- read_delim("Downloads/ts-d-14.03.04.03-wr.csv", ";", escape_double = FALSE, trim_ws = TRUE)
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR,color=Alter)) +
geom_line()
deaths <- na.omit(deaths)
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR,color=Alter)) +
geom_line()
unique(deaths$AnzTF_HR)
deaths <- deaths %>% filter(AnzTF_HR != ".")
unique(deaths$AnzTF_HR)
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR,color=Alter)) +
geom_line()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR,color=Alter)) +
geom_density()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_line() +
facet_wrap(Alter)
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_line() +
facet_wrap("Alter")
View(deaths)
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_line() +
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_line()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_line()
deaths %>% ggplot2(aes(x=Woche,y=AnzTF_HR)) +
geom_line()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_line()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR)) +
geom_point()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR, color=Alter)) +
geom_point()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR, color=Alter)) +
geom_point()
transform(deaths, Alter = as.numeric(Alter))
deaths <- read_delim("Downloads/ts-d-14.03.04.03-wr.csv", ";", escape_double = FALSE, trim_ws = TRUE)
deaths <- na.omit(deaths)
deaths <- deaths %>% filter(AnzTF_HR != ".")
transform(deaths, AnzTF_HR = as.numeric(AnzTF_HR))
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR, color=Alter)) +
geom_point()
deaths <-transform(deaths, AnzTF_HR = as.numeric(AnzTF_HR))
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR, color=Alter)) +
geom_point()
deaths %>% ggplot(aes(x=Woche,y=AnzTF_HR, color=Alter)) +
geom_line()
deaths %>% ggplot(aes(x=Woche)) +
geom_line(aes(y=AnzTF_HR, color=Alter)) +
geom_line(aes(y=Erwartung, color=Alter))
deaths %>% ggplot(aes(x=Woche)) +
geom_line(aes(y=AnzTF_HR, color=Alter)) +
geom_line(aes(y=Erwartung, color=Alter)) +
geom_point(aes(y=obeGrenze, color=Alter)) +
geom_point(aes(y=untGrenze, color=Alter))
deaths %>% ggplot(aes(x=Woche)) +
geom_point(aes(y=AnzTF_HR, color=Alter)) +
geom_line(aes(y=Erwartung, color=Alter)) +
geom_line(aes(y=obeGrenze, color=Alter)) +
geom_line(aes(y=untGrenze, color=Alter))
x_i <- function(x_0){
return (x_0 - ((x_0)^2 -7)/(2*x_0))
}
x_1 <- x_i(3)
View(x_i)
89
8/9
8/3
x_2 <- x_i(x_1)
x_3 <- x_i(x_2)
sqrt(7)
x_5 <- x_i(x_i(x_i(x_i(x_i(10)))))
x_5 <- x_i(x_i(x_i(x_i(x_i(100)))))
x_5 <- x_i(x_i(x_i(x_i(x_i(40)))))
x_5 <- x_i(x_i(x_i(x_i(x_i(sqrt(7))))))
x_5==sqrt(7)
x_5 <- x_i(x_i(x_i(x_i(x_i(3))))
x_5==sqrt(7)
x_5==sqrt(7)
x_5 <- x_i(x_i(x_i(x_i(x_i(-3))))
x_5 <- x_i(x_i(x_i(x_i(x_i(-5))))
x_5 <- x_i(x_i(x_i(x_i(x_i(-5)))))
x_5 <- x_i(x_i(x_i(x_i(x_i(-3)))))
library(purrr)
gc()
x <- seq(-4,4,length=100)*sd + mean
hx <- dnorm(x,mean,sd)
plot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
x <- seq(-4,4,length=100)*sqrt(5625) + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
plot(x, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
plot(x, hx, ylab="",
main="Normal Distribution", axes=FALSE)
plot(x, hx, type = "n",
main="Normal Distribution", axes=FALSE)
plot(x, hx, type = "l",
main="Normal Distribution", axes=FALSE)
225*1/(0.2^2)
225/(0.2^2)
sqrt(5625)
plot(x, hx, type = "l",
main="Normal Distribution")
x <- seq(-6,6,length=1000)*5625 + 1125
hx <- dnorm(x,mean,sd)
plot(x, hx, type="l", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
x <- seq(-6,6,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
x <- seq(-6,6,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l", xlab="IQ Values", ylab="",
main="Normal Distribution")
x <- seq(-5,5,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l", xlab="IQ Values", ylab="",
main="Normal Distribution")
x <- seq(-4.5,4.5,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l", xlab="IQ Values", ylab="",
main="Normal Distribution")
x <- seq(-4.5,4.5,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l",
main="Normal Distribution")
x <- seq(-4.5,4.5,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="n",
main="Normal Distribution")
x <- seq(-4.5,4.5,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l",
main="Normal Distribution")
x <- seq(-4,4,length=1000)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l",
main="Normal Distribution")
x <- seq(-4,4,length=500)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l",
main="Normal Distribution")
x <- seq(-4,4,length=200)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l",
main="Normal Distribution")
x <- seq(-3,3,length=200)*5625 + 1125
hx <- dnorm(x,1125,5625)
plot(x, hx, type="l",
main="Normal Distribution")
16*60
x <- seq(-4,4,length=200)*sqrt(5625) + 1125
hx <- dnorm(x,1125,sqrt(5625))
plot(x, hx, type="l",
main="Normal Distribution")
sqrt(5625)
1125-960
1125+165
erf(1)
library(pracma)
install.packages("pracma")
library(pracma)
erf(1)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
Prob_rate(-99,7.25)
Prob_rate(-1000,7.25)
Prob_rate(-1000,0)
Prob_rate(-1000,3)
Prob_rate(-1000,4)
Prob_rate(-1000,5)
Prob_rate(-1000,8)
Prob_rate(-1000,8725)
Prob_rate(-1000,10000)
Prob_rate(-1000,7.25)/sqrt(2)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
Prob_rate(-1000,10)
library(ggplot2)
plot(x, y~ Prob_rate(x))
x <- seq(5,10,by=0.1)
plot(x, y~ Prob_rate(x))
plot(x, y ~ Prob_rate(-1000,x))
plot(x, y ~ Prob_rate(l= -1000,h = x))
Prob_rate(l= -1000,h = x)
y <- Prob_rate(l= -1000,h = x)
plot(x, y)
Prob_rate(l= -10000,h = -1000)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
Prob_rate(-1000,7.5)
Prob_rate(-1000,7.25)
Prob_rate(7.25 - 0.4375, 7.25 + 0.4375)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
x <- seq(4.5,10.5,by=0.05)
y <- Density_fun(x)
plot(x, y, type ="l")
y
x <- seq(-10,10.5,by=0.05)
y <- Density_fun(x)
plot(x, y, type ="l")
Density_fun(x)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
integrate(Density_fun,-10,20)
integrate(Density_fun,7.25 - sqrt(0.4375),7.25 + sqrt(0.4375))
integrate(Density_fun,7.25 - 2*sqrt(0.4375),7.25 + 2*sqrt(0.4375))
integrate(Density_fun,7.25 - 2*sqrt(7/16),7.25 + 2*sqrt(7/16))
integrate(Density_fun,7.25 - 3*sqrt(7/16),7.25 + 3*sqrt(7/16))
Density_fun_2 <- function(v){
term_1 = -13 + 2*v
term_2 = -16 + 2*v
sum_all = pnorm(term1) - pnorm(term2)
return(8/3 * sum_all)
}
x <- seq(4.5,10.5,by=0.05)
y <- Density_fun_2(x)
plot(x, y, type ="l")
Density_fun_2 <- function(v){
term_1 = -13 + 2*v
term_2 = -16 + 2*v
sum_all = pnorm(term_1) - pnorm(term_2)
return(8/3 * sum_all)
}
x <- seq(4.5,10.5,by=0.05)
y <- Density_fun_2(x)
plot(x, y, type ="l")
integrate(Density_fun_2,-Inf,Inf)
integrate(Density_fun_2,-100,100)
Density_fun_2 <- function(v){
term_1 = -13 + 2*v
term_2 = -16 + 2*v
sum_all = pnorm(term_1) - pnorm(term_2)
return(2/3 * sum_all)
}
x <- seq(4.5,10.5,by=0.05)
y <- Density_fun_2(x)
plot(x, y, type ="l")
integrate(Density_fun_2,-Inf,Inf)
Prob_dist_2 <- function(l=-1000,h){
ah = -13+2*h
al = -13+2*l
bh = -16+2*h
bl = -16+2*l
term_ah = ah * pnorm(ah) + exp(-(ah^2)/2)/sqrt(2*pi)
term_al = al * pnorm(al) + exp(-(al^2)/2)/sqrt(2*pi)
term_bh = bh * pnorm(bh) + exp(-(bh^2)/2)/sqrt(2*pi)
term_bl = bl * pnorm(bl) + exp(-(bl^2)/2)/sqrt(2*pi)
sum_all = term_ah - term_al - term_bh + term_bl
return(1/3 * sum_all)
}
x <- seq(-10,10,by=0.05)
y <- Prob_dist_2(h=x)
plot(x, y, type ="l")
x <- seq(5,10,by=0.05)
y <- Prob_dist_2(h=x)
plot(x, y, type ="l")
x <- seq(4,10,by=0.05)
y <- Prob_dist_2(h=x)
plot(x, y, type ="l")
Prob_dist_2(h=7.25)
integrate(dnorm,-1,1)
integrate(Prob_dist_2,7.25-sqrt(7/16),7.25+sqrt(7/16))
integrate(Density_fun_2,7.25-sqrt(7/16),7.25+sqrt(7/16))
z <- pnorm(x)
plot(x, y, type ="l")+plot(x,z,type="l")
z <- pnorm(x,mean= 7.25,sd = sqrt(7/16))
plot(x, y, type ="l")+plot(x,z,type="l")
plot(x, y, type ="l")
plot(x,z,type="l")
plot(x, y, type ="l")
plot(x,z,type="l")
exp(-Inf)
Prob_dist_2 <- function(l=-Inf,h){
ah = -13+2*h
al = -13+2*l
bh = -16+2*h
bl = -16+2*l
term_ah = ah * pnorm(ah) + exp(-(ah^2)/2)/sqrt(2*pi)
term_al = al * pnorm(al) + exp(-(al^2)/2)/sqrt(2*pi)
term_bh = bh * pnorm(bh) + exp(-(bh^2)/2)/sqrt(2*pi)
term_bl = bl * pnorm(bl) + exp(-(bl^2)/2)/sqrt(2*pi)
sum_all = term_ah - term_al - term_bh + term_bl
return(1/3 * sum_all)
}
x=seq(4,10,by=0.05)
df <- data.frame(x=x, y = Prob_dist_2(h=x), z =  pnorm(x,mean= 7.25,sd = sqrt(7/16)) )
View(df)
pnorm(-Inf)
-13+2*-Inf
-Inf * 0
max(-Inf, -1000)
Prob_dist_2 <- function(l=-Inf,h){
ah = -13+2*h
al = -13+2*l
bh = -16+2*h
bl = -16+2*l
term_ah = max(ah,-10000) * pnorm(ah) + exp(-(ah^2)/2)/sqrt(2*pi)
term_al = max(al,-10000) * pnorm(al) + exp(-(al^2)/2)/sqrt(2*pi)
term_bh = max(bh,-10000) * pnorm(bh) + exp(-(bh^2)/2)/sqrt(2*pi)
term_bl = max(bl,-10000) * pnorm(bl) + exp(-(bl^2)/2)/sqrt(2*pi)
sum_all = term_ah - term_al - term_bh + term_bl
return(1/3 * sum_all)
}
x=seq(4,10,by=0.05)
df <- data.frame(x=x, y = Prob_dist_2(h=x), z =  pnorm(x,mean= 7.25,sd = sqrt(7/16)) )
plot(x, y, type ="l")
ggplot(df, aes(x=x))+
geom_smooth(aes(y=y),color = "blue")
ggplot(df, aes(x=x))+
geom_line(aes(y=y),color = "blue")
Prob_dist_2(h=x)
order(Prob_dist_2(h=x))
sort(Prob_dist_2(h=x))
Prob_dist_2 <- function(l=-Inf,h){
ah = -13+2*h
al = -13+2*l
bh = -16+2*h
bl = -16+2*l
term_ah = max(ah,-10000) * pnorm(ah) + exp(-(ah^2)/2)/sqrt(2*pi)
term_al = max(al,-10000) * pnorm(al) + exp(-(al^2)/2)/sqrt(2*pi)
term_bh = max(bh,-10000) * pnorm(bh) + exp(-(bh^2)/2)/sqrt(2*pi)
term_bl = max(bl,-10000) * pnorm(bl) + exp(-(bl^2)/2)/sqrt(2*pi)
sum_all = term_ah - term_al - term_bh + term_bl
return(1/3 * sum_all)
}
x=seq(4,10,by=0.05)
df <- data.frame(x=x, y = Prob_dist_2(h=x), z =  pnorm(x,mean= 7.25,sd = sqrt(7/16)) )
ggplot(df, aes(x=x))+
geom_line(aes(y=y),color = "blue")
x=seq(4,10,by=0.05)
Prob_dist_2(h=x)
sort(Prob_dist_2(h=x))
View(Prob_dist_2)
View(Prob_dist)
View(Prob_dist(h=x))
View(Prob_dist(h=x))
View(Prob_dist(h=x))
Prob_dist(h=x)
sort(Prob_dist(h=x))
Prob_dist_2 <- function(l=-1000,h){
ah = -13+2*h
al = -13+2*l
bh = -16+2*h
bl = -16+2*l
term_ah = ah * pnorm(ah) + exp(-(ah^2)/2)/sqrt(2*pi)
term_al = al * pnorm(al) + exp(-(al^2)/2)/sqrt(2*pi)
term_bh = bh * pnorm(bh) + exp(-(bh^2)/2)/sqrt(2*pi)
term_bl = bl * pnorm(bl) + exp(-(bl^2)/2)/sqrt(2*pi)
sum_all = term_ah - term_al - term_bh + term_bl
return(1/3 * sum_all)
}
x=seq(4,10,by=0.05)
df <- data.frame(x=x, y = Prob_dist_2(h=x), z =  pnorm(x,mean= 7.25,sd = sqrt(7/16)) )
ggplot(df, aes(x=x))+
geom_line(aes(y=y),color = "blue")
ggplot(df, aes(x=x))+
geom_line(aes(y=y),color = "blue")+
geom_line(aes(y=z),color = "red")
df2 <- data.frame(x=x, y = Density_fun_2(v=x), z = dnorm(x,mean= 7.25,sd = sqrt(7/16)) )
ggplot(df2, aes(x=x))+
geom_line(aes(y=y),color = "blue")+
geom_line(aes(y=z),color = "red")
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
ggplot(df, aes(x=v))+
geom_line(aes(y=y),color = "blue")+ #Verteilungsfunktion von V
#geom_line(aes(y=z),color = "red")   #Verteilungsfunktion der Normalverteilung mit \mu = E(V) und \sigma^2 = Var(V)
df2 <- data.frame(v=x, y = Density_fun(v=x), z = dnorm(x,mean= 7.25,sd = sqrt(7/16)) )
ggplot(df, aes(x=v))+
geom_line(aes(y=y),color = "blue")
ggplot(df2, aes(x=v))+
geom_line(aes(y=y),color = "blue")
ggplot(df2, aes(x=v))+
geom_line(aes(y=y),color = "blue")+  #Dichtefunktion von V
geom_line(aes(y=z),color = "red")    #Dichtefunktion der Normalverteilung mit \mu = E(V) und \sigma^2 = Var(V)
source("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen/Rendite.R", echo=TRUE)
knitr::stitch('Rendite.R')
getwd()
knitr::stitch("/Users/Eugen/Rendite.R")
knitr::stitch("/Users/Eugen/Rendite.r")
knitr::stitch('Rendite.R')
setwd()
getwd()
setwd("~/Desktop/LMU/WS21/Deskriptive Statistik/UÌˆbungen")
knitr::stitch('Rendite.R')
